GitHub grupes "Iguoanos" nuoroda: 
https://github.com/A-Kija/iguanos;

Atsiskaitymu nuodroda: 
https://drive.google.com/drive/folders/1iBBL___NuWpRjS9BW0RoRvb-3YbIrzAK;

Uzdaviniu nuoroda: 
https://drive.google.com/drive/folders/14cuilRyhvfXKAvomKjy3momqPiEanW_B;

React uzdaviniu nuoroda:
https://drive.google.com/drive/folders/1LayTfQE3KZOOi4-E_qDmFNboyjkb_ZEA

Appache nuoroda:
https://www.apachefriends.org/

STARTING REACT:

GitHub:
    - create new repository;
    - create new name for Repository name;

vscode:
    1:
    - create new file: readme.txt;
    - enter any message, 
    PVZ: Hello, world!.
    2:
    - create HTML: index.html;
    - download plugin: Live Server;
    - right click  index.html and select: Open with Live Server;
    (Note!!: Jei naudojame method kitoki, nei git, tada Live Server neveiks,
    bet Dead Server - veiks!)
    - crteate: app.js;
    - in app.js, enter: console.log('Hello, world!');
    - in index.html above <title></title>, enter: <script src='app.js' defer></script>. 



Terminal:
    -   git init
    -   git add README.md
    -   git commit -m "first commit" .. arba yrašome commit message ir commit'iname.
        (Do not publish yet!)
    -   git branch -M main  (Pasikeiciam pav. from 'master' to 'main')
    -   git remote add origin https://github.com/Lisbon-TV/homework.git
    -   git push -u origin main
    -   refresh GitHub.


Front-End: Js programavimo kalba sudaro ~50%, jai veikti reikalingos viena is dvieju erdviu:
        -> narsykle;
        -> gitnode;
        -> console. (NOTE!!: consoleje programuoti negalima!)

Back-End:  Js sudaro tik ~2%! PHP sudaro ~50%.


JS KINTAMUJU DEKLARAVIMAS:

Kintamieji turi dvi savybes:
 -> reiksme;
 -> tipas.

Nevartotinas:

var h = 30; 

Vartotini (i.e., riboto matomumo kintamieji: let ir const):

let a = 10;
const b = 20;


AUTOMATINES KINTAMUJU TIPU KONVERTACIJOS:

let a = 10;
console.log(type of a, a); -> Result: number, 10.

a = a + 1; 
console.log(type of a, a); -> Result: number, 11.

a = a + ''; -> Sustringinimas
console.log(type of a, a); -> Result: string, 10.

a = a + 10; -> Sustringinimas jau ivyko pries tai, todel:
console.log(type of a, a); -> Result: string, 1010.

***

let b = true;
console.log(type of b, b); -> Result: boolean, true.

b = b + ''; -> Sustringinimas
console.log(type of b, b); -> Result: string, true.

b = b + 10; -> Sustringinimas jau ivyko pries tai, todel:
console.log(type of b, b); -> Result: string, 10.

***

let c = true;
console.log(type of c, c); -> Result: boolean, true.

c = c + 10; -> Boolean reiksme true = 1; false = 0;
console.log(type of c, c); -> Result: number, 11.


JS FALSY VALUES: 
    -> values that resolve to the Boolean false.
https://www.educative.io/answers/what-are-falsy-values-and-truthy-in-javascript

In JavaScript, we have 6 falsy values:
        - false;
        - 0 (zero);
        - ‘’ or “” (empty string);
        - null;
        - undefined;
        - NaN.



***

let result;
let digit = 5;


if (10 > digit) {
    result = 'YES';
} else {
    result = 'NO';
}
console.log(result); -> Result: YES.


Salygos uzrasymas:

3 > digit && (result = 'YES') || (result = 'NO');
console.log(result); -> NO.


3 > digit && (result = 'YES');
(In Js 3 > 10 => false, toliaub Js nebeziuri, todel nebepriskirenoja sekancio resultato!)
console.log(result); -> Result: undefined. 

***

if (10) {
    console.log('YES');  
    } else {
    console.log('NO');
}

-> Result: YES. (number => true!)

***

if (0) {
    console.log('YES');  
    } else {
    console.log('NO');
}

-> Result: NO. (0 => false!)

***

let k = 1;

if (k--) {
    console.log('YES');  
    } else {
    console.log('NO');
}
-> Result: YES. (pirma if istato k => 1, -- operacijos nenaudojame, nes tikriname tik if ...)

***

let m = 1;

if (--m) {
    console.log('YES');  
    } else {
    console.log('NO');
}
-> Result: NO. (pirma if istato m => 1, tada: (cia --) -1  ir 1 => 0 => false!)

***

let g = 1;

if (g-- && g) {
    console.log('YES');  
    } else {
    console.log('NO');
}
-> Result: NO. (kai yra sekanti operacija, cia: && operacija, tik tada: suveikia -- operacija (ne if'as), todel: g => 1, tada, 1 - 1 (naudojam --, nes yra &&)  => 0; 0 => false; false & ((g=1) => true) = false!)

***





    













